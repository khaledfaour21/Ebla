generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Term {
  FIRST
  SECOND
}

enum ExamType {
  QUIZ1
  QUIZ2
  FINAL
  ORAL
  HOMEWORK
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String? //@unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  createdAt   DateTime     @default(now())
  attendances Attendance[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])

  @@index([classId])
  @@index([gradeId])
  @@index([parentId])
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String? //@unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  birthday  DateTime
  createdAt DateTime  @default(now())
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String //@unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classess Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]

  @@index([gradeId])
  @@index([supervisorId])
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  results     Result[]

  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]

  @@index([lessonId])
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]

  @@index([lessonId])
}

model Result {
  id   Int     @id @default(autoincrement())
  term Term?
  note String?

  // الحقول الجديدة (علامات مرنة - نصية)
  quiz1    String?
  quiz2    String?
  homework String?
  oral     String?
  final    String?
  total    String?

  // العلاقات
  studentId String
  lessonId  Int?

  student Student @relation(fields: [studentId], references: [id])
  lesson  Lesson? @relation(fields: [lessonId], references: [id])

  // غير مستخدمين حاليًا، بس تركتهم إذا بتحتاج assignment/exam بالمستقبل
  examId       Int?
  assignmentId Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])

  @@index([studentId])
  @@index([lessonId])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@index([lessonId])
  @@index([studentId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])

  @@index([classId])
}

model Library {
  id          Int      @id @default(autoincrement())
  title       String
  grade       String
  link        String
  description String
  image       String?
  createdAt   DateTime @default(now())
}
